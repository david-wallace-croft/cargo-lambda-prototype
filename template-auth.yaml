AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
# https://github.com/awsdocs/amazon-api-gateway-developer-guide/blob/main/cloudformation-templates/HTTP/http-with-jwt-auth.yaml
# https://aws.amazon.com/blogs/security/how-to-secure-api-gateway-http-endpoints-with-jwt-authorizer/
Resources:
  CargoLambdaUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      # UserPoolName: cargo-lambda-http-api-user-pool
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
  CargoLambdaUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      # TODO: reduce token lifetimes
      AllowedOAuthFlows:
        - code
        # TODO: Switch off of implicit
        # - implicit
      AllowedOAuthScopes:
        # - aws.cognito.signin.user.admin
        # - email
        - openid
        # - profile
      AllowedOAuthFlowsUserPoolClient: true
      # ClientName: cargo-lambda-http-api-client
      CallbackURLs:
        - "http://localhost:8080"
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true
      UserPoolId: !Ref CargoLambdaUserPool
      SupportedIdentityProviders:
        - COGNITO
  CargoLambdaHttpApi:
    # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-httpapi.html
    Type: AWS::Serverless::HttpApi
    Properties:
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-httpapiauth.html
      # https://docs.aws.amazon.com/apigatewayv2/latest/api-reference/apis-apiid-authorizers-authorizerid.html
      Auth:
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-jwt-authorizer.html
        Authorizers:
          CargoLambdaJwtAuthorizer:
            # AuthorizationScopes:
            #   - scope1
            #   - scope2
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              Audience:
                - !Ref CargoLambdaUserPoolClient
              Issuer: !Join
                - ""
                - - "https://cognito-idp."
                  - !Ref "AWS::Region"
                  - "."
                  - !Ref "AWS::URLSuffix"
                  - "/"
                  - !Ref CargoLambdaUserPool
        DefaultAuthorizer: CargoLambdaJwtAuthorizer
        # EnableIamAuthorizer: false
      Description: Cargo-Lambda Prototype HTTP API
      FailOnWarnings: true
      # Name: cargo-lambda-http-api
  CargoLambdaUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Join
        - "-"
        - - !Ref CargoLambdaHttpApi
          - !Ref CargoLambdaUserPoolClient
      UserPoolId: !Ref CargoLambdaUserPool
  CargoLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/cargo-lambda-prototype/
      Events:
        CargoLambdaEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref CargoLambdaHttpApi
            Method: GET
            Path: /
      # FunctionName: cargo-lambda-prototype
      Handler: rust.handler
      Runtime: provided.al2023
Outputs:
  CargoLambdaHttpApiUrl:
    Description: URL of the Cargo-Lambda Prototype HTTP API endpoint
    Value: !Join
      - ""
      - - "https://"
        - !Ref CargoLambdaHttpApi
        - ".execute-api."
        - !Ref "AWS::Region"
        - "."
        - !Ref "AWS::URLSuffix"
        - "/"
  CargoLambdaSignupUrl:
    Value: !Join
      - ""
      - - "https://"
        - !Ref CargoLambdaUserPoolDomain
        - ".auth."
        - !Ref "AWS::Region"
        - ".amazoncognito.com"
        - "/login"
        - "?client_id="
        - !Ref CargoLambdaUserPoolClient
        - "&response_type=code"
        - "&scope=openid"
        - "&redirect_uri=https%3A%2F%2Flocalhost%3A8080"
